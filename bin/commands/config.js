// Grab the modules we'll need
const Conf = require('conf');
const config = new Conf();
const chalk = require('chalk');
const url = require('url');

// The string used to execute this command in the terminal
exports.command = 'config';

// Description of this command
exports.describe = 'Specify data (i.e. accountId and accessToken) needed for subsequent Tempo API calls. Also allows a custom jiraBaseUrl to be specified for display purposes.';

// Function used to configure options for this command
exports.builder = (yargs) => {
  const jiraBaseUrl = config.get('jiraBaseUrl', 'https://sitecrafting.atlassian.net/');
  return yargs
    .option('accountId', {
      alias: 'account',
      type: 'string',
      describe: `Your Jira accountId. Can be found at ${jiraBaseUrl}rest/api/3/myself (must be logged in).`
    })
    .option('accessToken', {
      alias: 'token',
      type: 'string',
      describe: 'Your Tempo access token. Can be generated by going to Tempo > Settings and selecting API integration.'
    })
    .option('jiraBaseUrl', {
      alias: 'url',
      type: 'string',
      describe: 'Your Jira instance URL, used when outputting planned time results. Defaults to "https://sitecrafting.atlassian.net/" if none is specified.'
    });
};

// Function used to execute this command
exports.handler = function (argv) {
  // Grab options from the provided user input
  const accountId = argv.accountId;
  const token = argv.accessToken;
  const jiraBaseUrl = argv.jiraBaseUrl;

  // Did the user not specify any config options to set?
  if (!accountId && !token && !jiraBaseUrl) {
    console.error(chalk.red('Please specify at least one of the following options: accountId, accessToken, jiraBaseUrl.'));
    return;
  }
  
  // If we have an accountId, save it in the config for future use
  if (accountId) {
    config.set('accountId', accountId);
  }
  
  // If we have an accessToken, save it in the config for future use
  if (token) {
    config.set('token', token);
  }

  // If we have a jiraBaseUrl, save it in the config for future use
  // (but only if it's a valid URL)
  if (jiraBaseUrl) {
    try {
      const urlObject = new url.URL(jiraBaseUrl);
      const standardizedUrl = url.format(urlObject, { search: false, fragment: false, unicode: true, auth: false });
      console.warn(chalk.yellow(`NOTE: Your jiraBaseUrl has been formatted to "${standardizedUrl}"`));
      config.set('jiraBaseUrl', standardizedUrl);
    } catch (err) {
      console.warn(chalk.yellow('Invalid URL provided for jiraBaseUrl. Skipping this config option.'));
    }
  }
  
  console.log(chalk.green('Your config option(s) have been set! Once you have specified values for accountId and accessToken, you will be able to use the get command.'));
}