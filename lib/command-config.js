const Base = require('./command-base').Base;

/**
 * Class used to implement the functionality for the config command.
 * Used to store data required to run the get command.
 */
class Config extends Base {
  /**
   * Constructs our class and loads module dependencies
   * @param {Object} argv User arguments, as parsed by yargs module
   */
  constructor(argv) {
    super(argv);
    this.url = require('url');
  }

  /**
   * Adds options to the provided instance of yargs and returns it
   * @param {Yargs} yargs Yargs instance
   * @returns {Yargs} The updated yargs instance
   */
  static builder(yargs){
    return yargs
      .option('accountId', {
        alias: 'account',
        type: 'string',
        describe: `Your Jira accountId. Can be found at ${jiraBaseUrl}rest/api/3/myself (must be logged in).`
      })
      .option('accessToken', {
        alias: 'token',
        type: 'string',
        describe: 'Your Tempo access token. Can be generated by going to Tempo > Settings and selecting API integration.'
      })
      .option('jiraBaseUrl', {
        alias: 'url',
        type: 'string',
        describe: 'Your Jira instance URL, used when outputting planned time results. Defaults to "https://sitecrafting.atlassian.net/" if none is specified.'
      });
  }

  /**
   * Checks for unexpected/invalid user input
   * @throws Error if the user args are invalid in some way
   * @return {bool|void} True if args are valid, void otherwise
   */
  validateArgs(){
    // Did the user not specify any config options to set?
    if (!this.argv.accountId && !this.argv.token && !this.argv.jiraBaseUrl) {
      throw new Error(
        'Please specify at least one of the following options: accountId, accessToken, jiraBaseUrl.'
      );
    }

    return true;
  }

  /**
   * Executes this command and outputs the result
   * @returns void
   */
  execute(){
    try {
      this.validateArgs();

      // If we have an accountId, save it in the config for future use
      if (this.argv.accountId) {
        this.config.set('accountId', this.argv.accountId);
      }
      
      // If we have an accessToken, save it in the config for future use
      if (this.argv.token) {
        this.config.set('token', this.argv.token);
      }

      // If we have a jiraBaseUrl, save it in the config for future use
      // (but only if it's a valid URL)
      if (this.argv.jiraBaseUrl) {
        try {
          const urlObject = new this.url.URL(this.argv.jiraBaseUrl);
          const standardizedUrl = url.format(urlObject, { search: false, fragment: false, unicode: true, auth: false });
          this.outputWarning(
            `NOTE: Your jiraBaseUrl has been formatted to "${standardizedUrl}"`
          );
          this.config.set('jiraBaseUrl', standardizedUrl);
        } catch (err) {
          this.outputWarning(
            'Invalid URL provided for jiraBaseUrl. Skipping this config option.'
          );
        }
      }
    } catch (error) {
      this.outputError(error.message);
      return;
    }
    
    this.outputSuccess(
      'Your config option(s) have been set! Once you have specified values for accountId and accessToken, you will be able to use the get command.'
    );
  }
}

exports.Config = Config;