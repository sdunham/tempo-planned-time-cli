const Base = require('./command-base').Base;

/**
 * Class used to implement the functionality for the config command.
 * Used to store data required to run the get command.
 */
class Config extends Base {
  /**
   * Constructs our class and loads module dependencies
   * @param {Object} argv User arguments, as parsed by yargs module
   */
  constructor(argv) {
    super(argv);
    this.url = require('url');
    this.util = require('util');
  }

  /**
   * Adds options to the provided instance of yargs and returns it
   * @param {Yargs} yargs Yargs instance
   * @returns {Yargs} The updated yargs instance
   */
  static builder(yargs){
    return yargs
      .option('accountId', {
        alias: 'account',
        type: 'string',
        describe: `Your Jira accountId. Can be found at /rest/api/3/myself at your Jira URL (must be logged in).`
      })
      .option('accessToken', {
        alias: 'token',
        type: 'string',
        describe: 'Your Tempo access token. Can be generated by going to Tempo > Settings and selecting API integration.'
      })
      .option('jiraBaseUrl', {
        alias: 'url',
        type: 'string',
        describe: 'Your Jira instance URL, used when outputting planned time results. Defaults to "https://sitecrafting.atlassian.net/" if none is specified.'
      });
  }

  /**
   * Checks for unexpected/invalid user input
   * @throws Error if the user args are invalid in some way
   * @return {bool|void} True if args are valid, void otherwise
   */
  validateArgs(){
    // Did the user not specify any config options to set?
    if (!this.argv.accountId && !this.argv.token && !this.argv.jiraBaseUrl) {
      throw new Error(
        'Please specify at least one of the following options: accountId, accessToken, jiraBaseUrl.'
      );
    }

    return true;
  }

  /**
   * Checks if none of the expected config arguments were passed
   * when running the command
   * @returns {bool} True if no expected args were passed, false otherwise
   */
  noArgsPassed() {
    return !this.argv.accountId && !this.argv.token && !this.argv.jiraBaseUrl;
  }

  /**
   * Gets all current config data as a plain object. Used primarily to get
   * something suitable to output to the console.
   * @returns {Object} The config data as a plain object
   */
  getAllConfigData() {
    // Coerce the config store to a plain object, mostly for display purposes
    return Object.assign({}, this.config.store);
  }

  /**
   * Builds a message string to be output to the user based on how many
   * required config options have been set.
   * @returns {string}
   */
  getOptionsSetMessage() {
    const config = this.getAllConfigData();
    const missingRequired = [];

    if (!('accountId' in config)) {
      missingRequired.push('accountId');
    }

    if (!('token' in config)) {
      missingRequired.push('accessToken');
    }

    let message = 'Your configuration has been updated!';

    if (missingRequired.length === 0) {
      message += ' Now that you\'ve set your accountId and accessToken, you\'re all set to use the get command!';
    } else {
      message += ` You still need to set the following required options before you're able to use the get command: ${missingRequired.join(', ')}`;
    }

    return message;
  }

  /**
   * Executes this command and outputs the result
   * @returns void
   */
  execute(){
    try {
      // If we have an accountId, save it in the config for future use
      if (this.argv.accountId) {
        this.config.set('accountId', this.argv.accountId);
      }
      
      // If we have an accessToken, save it in the config for future use
      if (this.argv.token) {
        this.config.set('token', this.argv.token);
      }

      // If we have a jiraBaseUrl, save it in the config for future use
      // (but only if it's a valid URL)
      if (this.argv.jiraBaseUrl) {
        try {
          const urlObject = new this.url.URL(this.argv.jiraBaseUrl);
          const standardizedUrl = url.format(urlObject, { search: false, fragment: false, unicode: true, auth: false });
          this.outputWarning(
            `NOTE: Your jiraBaseUrl has been formatted to "${standardizedUrl}"`
          );
          this.config.set('jiraBaseUrl', standardizedUrl);
        } catch (err) {
          this.outputWarning(
            'Invalid URL provided for jiraBaseUrl. Skipping this config option.'
          );
        }
      }
    } catch (error) {
      this.outputError(error.message);
      return;
    }
    
    if (this.noArgsPassed()) {
      this.outputDefault('Your current configuration data:');
      this.outputDefault(
        this.util.inspect(this.getAllConfigData(), {colors: true, compact: false})
      );
    } else {
      this.outputSuccess(
        this.getOptionsSetMessage()
      );
    }
  }
}

exports.Config = Config;